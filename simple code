#include <iostream>
using namespace std;

struct bst
{
	int data;
	bst *left, *right;
	bst();
	bst(int);
	bst* insert(bst*, int);
	void inorder(bst*);
	bst* search(bst*, int);
};

bst::bst()
	: data(0)
	, left(NULL)
	, right(NULL)
{
}
bst::bst(int value)
	: data(value)
	, left(NULL)
	, right(NULL)
{
}
bst* bst::insert(bst* root, int value)
{
	if (!root)
		return new bst(value);
	if (value < root->data)
		root->left = insert(root->left, value);
	else if (value > root->data)
		root->right = insert(root->right, value);
	return root;
}
void bst::inorder(bst* root)
{
	if (!root)
		return;
	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}

bst* bst::search(bst* root, int key)
{
	if ((root->data == key) || (root == NULL))
		return root;
	else
	{
		if (root->data < key)
			search(root->right, key);
		else if (root->data > key)
			search(root->left, key);
	}
}


int main()
{
	bst b, * root = NULL;
	root = b.insert(root, 50);
	b.insert(root, 30);
	b.insert(root, 70);
	b.insert(root, 10);
	b.insert(root, 60);
	b.insert(root, 90);
	b.insert(root, 20);
	b.inorder(root);
	cout << endl;
	cout << b.search(root, 70) << " " << b.search(root, 70)->data;
}
